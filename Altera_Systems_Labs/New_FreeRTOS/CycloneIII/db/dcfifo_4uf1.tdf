--dcfifo_mixed_widths CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone III" IGNORE_CARRY_BUFFERS="OFF" LPM_NUMWORDS=16 LPM_SHOWAHEAD="OFF" LPM_WIDTH=52 LPM_WIDTH_R=52 LPM_WIDTHU=4 LPM_WIDTHU_R=4 OVERFLOW_CHECKING="ON" RDSYNC_DELAYPIPE=5 UNDERFLOW_CHECKING="ON" USE_EAB="ON" WRSYNC_DELAYPIPE=5 aclr data q rdclk rdempty rdreq wrclk wrfull wrreq CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="CYCLONEIII" LOW_POWER_MODE="AUTO" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 8.0SP1 cbx_a_gray2bin 2008:06:02:292401 cbx_a_graycounter 2008:06:02:292401 cbx_altdpram 2008:06:02:292401 cbx_altsyncram 2008:06:16:296212 cbx_cycloneii 2008:06:02:292401 cbx_dcfifo 2008:06:02:292401 cbx_fifo_common 2008:06:02:292401 cbx_flex10ke 2008:06:02:292401 cbx_lpm_add_sub 2008:06:02:292401 cbx_lpm_compare 2008:06:02:292401 cbx_lpm_counter 2008:06:02:292401 cbx_lpm_decode 2008:06:02:292401 cbx_lpm_mux 2008:06:02:292401 cbx_mgl 2008:06:02:292401 cbx_scfifo 2008:06:02:292401 cbx_stratix 2008:06:02:292401 cbx_stratixii 2008:06:02:292401 cbx_stratixiii 2008:06:18:296807 cbx_util_mgl 2008:06:02:292401  VERSION_END


-- Copyright (C) 1991-2008 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION a_graycounter_g47 (aclr, clock, cnt_en)
RETURNS ( q[4..0]);
FUNCTION a_graycounter_cic (aclr, clock, cnt_en)
RETURNS ( q[4..0]);
FUNCTION a_graycounter_fic (aclr, clock, cnt_en)
RETURNS ( q[4..0]);
FUNCTION altsyncram_bi31 (aclr1, address_a[3..0], address_b[3..0], addressstall_b, clock0, clock1, clocken1, data_a[51..0], wren_a)
RETURNS ( q_b[51..0]);
FUNCTION alt_synch_pipe_kc8 (clock, clrn, d[4..0])
RETURNS ( q[4..0]);
FUNCTION alt_synch_pipe_nc8 (clock, clrn, d[4..0])
RETURNS ( q[4..0]);
FUNCTION mux_a18 (data[1..0], sel[0..0])
RETURNS ( result[0..0]);

--synthesis_resources = lut 30 M9K 2 reg 62 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=s102;{-to rdemp_eq_comp_lsb_aeb} POWER_UP_LEVEL=HIGH;{-to rdemp_eq_comp_msb_aeb} POWER_UP_LEVEL=HIGH;{ -from ""rdptr_g"" -to ""ws_dgrp|dffpipe9|dffe10a"" }CUT=ON;-name SDC_STATEMENT ""set_false_path -from *rdptr_g* -to *ws_dgrp|dffpipe_id9:dffpipe9|dffe10a* "";{ -from ""delayed_wrptr_g"" -to ""rs_dgwp|dffpipe6|dffe7a"" }CUT=ON;-name SDC_STATEMENT ""set_false_path -from *delayed_wrptr_g* -to *rs_dgwp|dffpipe_hd9:dffpipe6|dffe7a* """;

SUBDESIGN dcfifo_4uf1
( 
	aclr	:	input;
	data[51..0]	:	input;
	q[51..0]	:	output;
	rdclk	:	input;
	rdempty	:	output;
	rdreq	:	input;
	wrclk	:	input;
	wrfull	:	output;
	wrreq	:	input;
) 
VARIABLE 
	rdptr_g1p : a_graycounter_g47;
	wrptr_g1p : a_graycounter_cic;
	wrptr_gp : a_graycounter_fic;
	fifo_ram : altsyncram_bi31;
	delayed_wrptr_g[4..0] : dffe;
	rdemp_eq_comp_lsb_aeb : dffe
		WITH (
			power_up = "high"
		);
	rdemp_eq_comp_msb_aeb : dffe
		WITH (
			power_up = "high"
		);
	rdptr_g[4..0] : dffe;
	rs_dgwp_reg[4..0] : dffe;
	wrfull_eq_comp_lsb_mux_reg : dffe;
	wrfull_eq_comp_msb_mux_reg : dffe;
	ws_dgrp_reg[4..0] : dffe;
	rs_dgwp : alt_synch_pipe_kc8;
	ws_dgrp : alt_synch_pipe_nc8;
	rdempty_eq_comp1_lsb_aeb_int	:	WIRE;
	rdempty_eq_comp1_lsb_aeb	:	WIRE;
	rdempty_eq_comp1_lsb_dataa[2..0]	:	WIRE;
	rdempty_eq_comp1_lsb_datab[2..0]	:	WIRE;
	rdempty_eq_comp1_msb_aeb_int	:	WIRE;
	rdempty_eq_comp1_msb_aeb	:	WIRE;
	rdempty_eq_comp1_msb_dataa[1..0]	:	WIRE;
	rdempty_eq_comp1_msb_datab[1..0]	:	WIRE;
	rdempty_eq_comp_lsb_aeb_int	:	WIRE;
	rdempty_eq_comp_lsb_aeb	:	WIRE;
	rdempty_eq_comp_lsb_dataa[2..0]	:	WIRE;
	rdempty_eq_comp_lsb_datab[2..0]	:	WIRE;
	rdempty_eq_comp_msb_aeb_int	:	WIRE;
	rdempty_eq_comp_msb_aeb	:	WIRE;
	rdempty_eq_comp_msb_dataa[1..0]	:	WIRE;
	rdempty_eq_comp_msb_datab[1..0]	:	WIRE;
	wrfull_eq_comp1_lsb_aeb_int	:	WIRE;
	wrfull_eq_comp1_lsb_aeb	:	WIRE;
	wrfull_eq_comp1_lsb_dataa[2..0]	:	WIRE;
	wrfull_eq_comp1_lsb_datab[2..0]	:	WIRE;
	wrfull_eq_comp1_msb_aeb_int	:	WIRE;
	wrfull_eq_comp1_msb_aeb	:	WIRE;
	wrfull_eq_comp1_msb_dataa[1..0]	:	WIRE;
	wrfull_eq_comp1_msb_datab[1..0]	:	WIRE;
	wrfull_eq_comp_lsb_aeb_int	:	WIRE;
	wrfull_eq_comp_lsb_aeb	:	WIRE;
	wrfull_eq_comp_lsb_dataa[2..0]	:	WIRE;
	wrfull_eq_comp_lsb_datab[2..0]	:	WIRE;
	wrfull_eq_comp_msb_aeb_int	:	WIRE;
	wrfull_eq_comp_msb_aeb	:	WIRE;
	wrfull_eq_comp_msb_dataa[1..0]	:	WIRE;
	wrfull_eq_comp_msb_datab[1..0]	:	WIRE;
	rdemp_eq_comp_lsb_mux : mux_a18;
	rdemp_eq_comp_msb_mux : mux_a18;
	wrfull_eq_comp_lsb_mux : mux_a18;
	wrfull_eq_comp_msb_mux : mux_a18;
	int_rdempty	: WIRE;
	int_wrfull	: WIRE;
	ram_address_a[3..0]	: WIRE;
	ram_address_b[3..0]	: WIRE;
	valid_rdreq	: WIRE;
	valid_wrreq	: WIRE;
	wrptr_g1s[4..0]	: WIRE;
	wrptr_gs[4..0]	: WIRE;

BEGIN 
	rdptr_g1p.aclr = aclr;
	rdptr_g1p.clock = rdclk;
	rdptr_g1p.cnt_en = valid_rdreq;
	wrptr_g1p.aclr = aclr;
	wrptr_g1p.clock = wrclk;
	wrptr_g1p.cnt_en = valid_wrreq;
	wrptr_gp.aclr = aclr;
	wrptr_gp.clock = wrclk;
	wrptr_gp.cnt_en = valid_wrreq;
	fifo_ram.aclr1 = aclr;
	fifo_ram.address_a[] = ram_address_a[];
	fifo_ram.address_b[] = ram_address_b[];
	fifo_ram.addressstall_b = (! valid_rdreq);
	fifo_ram.clock0 = wrclk;
	fifo_ram.clock1 = rdclk;
	fifo_ram.clocken1 = valid_rdreq;
	fifo_ram.data_a[] = data[];
	fifo_ram.wren_a = valid_wrreq;
	delayed_wrptr_g[].clk = wrclk;
	delayed_wrptr_g[].clrn = (! aclr);
	delayed_wrptr_g[].d = wrptr_gp.q[];
	rdemp_eq_comp_lsb_aeb.clk = rdclk;
	rdemp_eq_comp_lsb_aeb.d = rdemp_eq_comp_lsb_mux.result[];
	rdemp_eq_comp_lsb_aeb.prn = (! aclr);
	rdemp_eq_comp_msb_aeb.clk = rdclk;
	rdemp_eq_comp_msb_aeb.d = rdemp_eq_comp_msb_mux.result[];
	rdemp_eq_comp_msb_aeb.prn = (! aclr);
	rdptr_g[].clk = rdclk;
	rdptr_g[].clrn = (! aclr);
	rdptr_g[].d = rdptr_g1p.q[];
	rdptr_g[].ena = valid_rdreq;
	rs_dgwp_reg[].clk = rdclk;
	rs_dgwp_reg[].clrn = (! aclr);
	rs_dgwp_reg[].d = rs_dgwp.q[];
	wrfull_eq_comp_lsb_mux_reg.clk = wrclk;
	wrfull_eq_comp_lsb_mux_reg.clrn = (! aclr);
	wrfull_eq_comp_lsb_mux_reg.d = wrfull_eq_comp_lsb_mux.result[];
	wrfull_eq_comp_msb_mux_reg.clk = wrclk;
	wrfull_eq_comp_msb_mux_reg.clrn = (! aclr);
	wrfull_eq_comp_msb_mux_reg.d = wrfull_eq_comp_msb_mux.result[];
	ws_dgrp_reg[].clk = wrclk;
	ws_dgrp_reg[].clrn = (! aclr);
	ws_dgrp_reg[].d = ws_dgrp.q[];
	rs_dgwp.clock = rdclk;
	rs_dgwp.clrn = (! aclr);
	rs_dgwp.d[] = delayed_wrptr_g[].q;
	ws_dgrp.clock = wrclk;
	ws_dgrp.clrn = (! aclr);
	ws_dgrp.d[] = rdptr_g[].q;
	IF (rdempty_eq_comp1_lsb_dataa[] == rdempty_eq_comp1_lsb_datab[]) THEN
		rdempty_eq_comp1_lsb_aeb_int = VCC;
	ELSE
		rdempty_eq_comp1_lsb_aeb_int = GND;
	END IF;
	rdempty_eq_comp1_lsb_aeb = rdempty_eq_comp1_lsb_aeb_int;
	rdempty_eq_comp1_lsb_dataa[] = rs_dgwp.q[2..0];
	rdempty_eq_comp1_lsb_datab[] = rdptr_g1p.q[2..0];
	IF (rdempty_eq_comp1_msb_dataa[] == rdempty_eq_comp1_msb_datab[]) THEN
		rdempty_eq_comp1_msb_aeb_int = VCC;
	ELSE
		rdempty_eq_comp1_msb_aeb_int = GND;
	END IF;
	rdempty_eq_comp1_msb_aeb = rdempty_eq_comp1_msb_aeb_int;
	rdempty_eq_comp1_msb_dataa[] = rs_dgwp.q[4..3];
	rdempty_eq_comp1_msb_datab[] = rdptr_g1p.q[4..3];
	IF (rdempty_eq_comp_lsb_dataa[] == rdempty_eq_comp_lsb_datab[]) THEN
		rdempty_eq_comp_lsb_aeb_int = VCC;
	ELSE
		rdempty_eq_comp_lsb_aeb_int = GND;
	END IF;
	rdempty_eq_comp_lsb_aeb = rdempty_eq_comp_lsb_aeb_int;
	rdempty_eq_comp_lsb_dataa[] = rs_dgwp.q[2..0];
	rdempty_eq_comp_lsb_datab[] = rdptr_g[2..0].q;
	IF (rdempty_eq_comp_msb_dataa[] == rdempty_eq_comp_msb_datab[]) THEN
		rdempty_eq_comp_msb_aeb_int = VCC;
	ELSE
		rdempty_eq_comp_msb_aeb_int = GND;
	END IF;
	rdempty_eq_comp_msb_aeb = rdempty_eq_comp_msb_aeb_int;
	rdempty_eq_comp_msb_dataa[] = rs_dgwp.q[4..3];
	rdempty_eq_comp_msb_datab[] = rdptr_g[4..3].q;
	IF (wrfull_eq_comp1_lsb_dataa[] == wrfull_eq_comp1_lsb_datab[]) THEN
		wrfull_eq_comp1_lsb_aeb_int = VCC;
	ELSE
		wrfull_eq_comp1_lsb_aeb_int = GND;
	END IF;
	wrfull_eq_comp1_lsb_aeb = wrfull_eq_comp1_lsb_aeb_int;
	wrfull_eq_comp1_lsb_dataa[] = ws_dgrp.q[2..0];
	wrfull_eq_comp1_lsb_datab[] = wrptr_g1s[2..0];
	IF (wrfull_eq_comp1_msb_dataa[] == wrfull_eq_comp1_msb_datab[]) THEN
		wrfull_eq_comp1_msb_aeb_int = VCC;
	ELSE
		wrfull_eq_comp1_msb_aeb_int = GND;
	END IF;
	wrfull_eq_comp1_msb_aeb = wrfull_eq_comp1_msb_aeb_int;
	wrfull_eq_comp1_msb_dataa[] = ws_dgrp.q[4..3];
	wrfull_eq_comp1_msb_datab[] = wrptr_g1s[4..3];
	IF (wrfull_eq_comp_lsb_dataa[] == wrfull_eq_comp_lsb_datab[]) THEN
		wrfull_eq_comp_lsb_aeb_int = VCC;
	ELSE
		wrfull_eq_comp_lsb_aeb_int = GND;
	END IF;
	wrfull_eq_comp_lsb_aeb = wrfull_eq_comp_lsb_aeb_int;
	wrfull_eq_comp_lsb_dataa[] = ws_dgrp.q[2..0];
	wrfull_eq_comp_lsb_datab[] = wrptr_gs[2..0];
	IF (wrfull_eq_comp_msb_dataa[] == wrfull_eq_comp_msb_datab[]) THEN
		wrfull_eq_comp_msb_aeb_int = VCC;
	ELSE
		wrfull_eq_comp_msb_aeb_int = GND;
	END IF;
	wrfull_eq_comp_msb_aeb = wrfull_eq_comp_msb_aeb_int;
	wrfull_eq_comp_msb_dataa[] = ws_dgrp.q[4..3];
	wrfull_eq_comp_msb_datab[] = wrptr_gs[4..3];
	rdemp_eq_comp_lsb_mux.data[] = ( rdempty_eq_comp1_lsb_aeb, rdempty_eq_comp_lsb_aeb);
	rdemp_eq_comp_lsb_mux.sel[] = valid_rdreq;
	rdemp_eq_comp_msb_mux.data[] = ( rdempty_eq_comp1_msb_aeb, rdempty_eq_comp_msb_aeb);
	rdemp_eq_comp_msb_mux.sel[] = valid_rdreq;
	wrfull_eq_comp_lsb_mux.data[] = ( wrfull_eq_comp1_lsb_aeb, wrfull_eq_comp_lsb_aeb);
	wrfull_eq_comp_lsb_mux.sel[] = valid_wrreq;
	wrfull_eq_comp_msb_mux.data[] = ( wrfull_eq_comp1_msb_aeb, wrfull_eq_comp_msb_aeb);
	wrfull_eq_comp_msb_mux.sel[] = valid_wrreq;
	int_rdempty = (rdemp_eq_comp_lsb_aeb.q & rdemp_eq_comp_msb_aeb.q);
	int_wrfull = (wrfull_eq_comp_lsb_mux_reg.q & wrfull_eq_comp_msb_mux_reg.q);
	q[] = fifo_ram.q_b[];
	ram_address_a[] = ( (wrptr_gp.q[4..4] $ wrptr_gp.q[3..3]), wrptr_gp.q[2..0]);
	ram_address_b[] = ( (rdptr_g1p.q[4..4] $ rdptr_g1p.q[3..3]), rdptr_g1p.q[2..0]);
	rdempty = int_rdempty;
	valid_rdreq = (rdreq & (! int_rdempty));
	valid_wrreq = (wrreq & (! int_wrfull));
	wrfull = int_wrfull;
	wrptr_g1s[] = ( (! wrptr_g1p.q[4..4]), (! wrptr_g1p.q[3..3]), wrptr_g1p.q[2..0]);
	wrptr_gs[] = ( (! wrptr_gp.q[4..4]), (! wrptr_gp.q[3..3]), wrptr_gp.q[2..0]);
END;
--VALID FILE
